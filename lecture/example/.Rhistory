lock_aspect = FALSE,
xlab_rot = 90, xvals_size = 8,
ispace = list(bottom = 15))
berkeley <- as.data.frame(UCBAdmissions)
freq <- berkeley %>%
group_by(Admit, Gender) %>%
summarise(sum = sum(Freq))
freq
mytable <- xtabs(sum ~ Admit + Gender, data = freq)
prop.table(mytable)
berkeley %>%
group_by(Admit, Gender) %>%
summarise(sum = sum(Freq))
freq
chisq.test(mytable)
mantelhaen.test(UCBAdmissions)
mytable <- xtabs(~Pclass + Survived + Sex, data = titanic_train)
library(titanic)
View(titanic_train)
mytable <- xtabs(~Pclass + Survived + Sex, data = titanic_train)
mytable
library(tidyverse)
library(tidyverse)
oddcount <- function(x){
k <- 0
for (i in seq_along(x)){
if (x[i] %% 2 == 1) k <- k+1
}
sprintf("Total number of odd numbers is %d", k)
return(k)
}
data <- seq(1:9)
oddcount(data)
x <- c()
1:length(x)
typeof(data)
rep(seq(1:10), each = 4)
findruns(,2)
data <- c(1,0,0,1,1,1,0,1,1)
findruns <- function(data, k){
n <- length(data)
runs <- NULL
for (i in 1:(n-k+1)){
if all(data[i:(i+k-1)] == 1) runs <- c(runs, i)
}
springf("There are %d runs", length(runs))
return(runs)
}
findruns(data, 2)
data <- c(1,0,0,1,1,1,0,1,1)
findruns <- function(data, k){
n <- length(data)
runs <- NULL
for (i in 1:(n-k+1)){
if all(data[i:(i+k-1)] == 1) runs <- c(runs, i)
}
springf("There are %d runs", length(runs))
return(runs)
}
findruns(data, 2)
data <- c(1,0,0,1,1,1,0,1,1)
n <- length(data)
runs <- NULL
for (i in 1:(n-2+1)){
if all(data[i:(i+k-1)] == 1) runs <- c(runs, i)
}
for (i in 1:(n-2+1)) {
if all(data[i:(i+k-1)] == 1) runs <- c(runs, i)
}
for (i in 1:(n-2+1)) {
if (all(data[i:(i+k-1)] == 1)) runs <- c(runs, i)
}
data <- c(1,0,0,1,1,1,0,1,1)
findruns <- function(data, k){
n <- length(data)
runs <- NULL
for (i in 1:(n-k+1)){
if (all(data[i:(i+k-1)] == 1)) runs <- c(runs, i)
}
springf("There are %d runs", length(runs))
return(runs)
}
findruns(data, 2)
data <- c(1,0,0,1,1,1,0,1,1)
findruns <- function(data, k){
n <- length(data)
runs <- NULL
for (i in 1:(n-k+1)){
if (all(data[i:(i+k-1)] == 1)) runs <- c(runs, i)
}
sprintf("There are %d runs", length(runs))
return(runs)
}
findruns(data, 2)
search()
library(MASS)
search()
detach(package:MASS, unload = TRUE)
search()
data <- as.data.frame(UCBAdmissions)
data
data %>%
group_by(Gender, Admit) %>%
summarise(n = sum(Freq))
data <- as.data.frame(UCBAdmissions)
data %>%
group_by(Gender, Admit) %>%
summarise(n = sum(Freq)) %>%
ggplot(mapping = aes(x = Gender, y = Admit, fill = n)) +
geom_col()
titanic <- tribble(
~Class, ~Sex, ~n,
"1st class", "female passengers", 144,
"1st class", "male passengers", 179,
"2nd class", "female passengers", 106,
"2nd class", "male passengers", 171,
"3rd class", "female passengers", 216,
"3rd class", "male passengers", 493
)
titanic
titanic <- tribble(
~Class, ~Sex, ~n,
"1st class", "female passengers", 144,
"1st class", "male passengers", 179,
"2nd class", "female passengers", 106,
"2nd class", "male passengers", 171,
"3rd class", "female passengers", 216,
"3rd class", "male passengers", 493
)
ggplot(data = titanic, mapping = aes(x = class, y = sex, fill = n))+
geom_col()
titanic <- tribble(
~Class, ~Sex, ~n,
"1st class", "female passengers", 144,
"1st class", "male passengers", 179,
"2nd class", "female passengers", 106,
"2nd class", "male passengers", 171,
"3rd class", "female passengers", 216,
"3rd class", "male passengers", 493
)
ggplot(data = titanic, mapping = aes(x = Class, y = Sex, fill = n))+
geom_col()
ggplot(data = titanic, mapping = aes(x = Class, y = Sex, fill = n))+
geom_col(position = "fill")
joint.dist <- prop.table(table(diamonds$cut, diamonds$color))
joint.dist
joint.dist
joint.dist <- addmargins(joint.dist)
joint.dist
prop.table(table(diamonds$cut, diamonds$color), margin = 1)
joint.dist
joint.dist[-6,-8]/joint.dist[-6,8]
prop.table(table(diamonds$cut, diamonds$color), margin = 1)
tableA <- joint.dist[-6,-8]/joint.dist[-6,8]
tableB <- prop.table(table(diamonds$cut, diamonds$color), margin = 1)
all.equal(tableA, tableB)
library(tidyverse)
library(tidyverse)
n <- 1e4
h <- .01
x <- 2
X <- rnorm(n)
kv <- ifesle(abs((X -x)/h)<=1, 1/2,0)
1/(n*h)sum(kv)
library(tidyverse)
n <- 1e4
h <- .01
x <- 2
X <- rnorm(n)
kv <- ifesle(abs((X -x)/h)<=1, 1/2,0)
1/(n*h)*sum(kv)
dnorm(2)
library(tidyverse)
n <- 1e4
h <- .01
x <- 2
X <- rnorm(n)
kv <- ifelse(abs((X -x)/h)<=1, 1/2,0)
1/(n*h)*sum(kv)
dnorm(2)
library(tidyverse)
n <- 1e4
h <- .01
x <- 2
X <- rnorm(n)
kv <- ifelse(abs((X -x)/h)<=1, 1/2,0)
1/(n*h)*sum(kv)
dnorm(2)
library(tidyverse)
n <- 1e4
h <- .01
x <- 2
X <- rnorm(n)
kv <- ifelse(abs((X -x)/h)<=1, 1/2,0)
1/(n*h)*sum(kv)
dnorm(2)
rm(list=ls())
data <- data.frame(x = rnorm(10)) %>%
mutate(x = ifelse(x<=0, NA, x))
data %>%
mutate(id = is.na(x)) %>%
arrange(desc(id))
library(ggridges)
ggplot(data = faithful, mapping = aes(x = Sepal.Width, y = Species, fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_b(position = "C")
library(ggridges)
ggplot(data = faithful, mapping = aes(x = Sepal.Width, y = Species, fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_b(position = "C")
ggplot(data = faithful, mapping = aes(x = Sepal.Width, y = Species, fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_b(position = "c")
ggplot(data = faithful, mapping = aes(x = Sepal.Width, y = Species, fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_b(pattern = "C")
ggplot(data = faithful, mapping = aes(x = Sepal.Width, y = Species, fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_b(option = "C")
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Species, fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_b(option = "C")
"+"(2,3)
rep(c(1,2,3,4), each = 4)
oddcount <- function(x){
k <- 0
if (i in seq_along(x)){
if (x[i]%%2 == 1) k <- k + 1
}
return(k)
}
oddcount(c(1:9))
k <- 0
if (i in seq_along(x)){
if (x[i]%%2 == 1) k <- k + 1
}
if (i in seq_along(x)) {
if (x[i]%%2 == 1) k <- k + 1
}
x[1]
x <- c(1:9)
x
x[1]
seq_along
seq_along(x)
x[2] %% 2 == 1
x[2] %% 2 == 0
oddcount <- function(x){
k <- 0
for (i in seq_along(x)) {
} (i in seq_along(x)) {
if (x[i] %% 2 == 1) k <- k + 1
}
return(k)
}
oddcount(c(1:9))
oddcount <- function(x){
k <- 0
for (i in seq_along(x)) {
if (x[i] %% 2 == 1) k <- k + 1
}
return(k)
}
oddcount(c(1:9))
data <- c(1, 0,0,1,1,1, 0, 1,1)
data
runs <- vector(length(data))
data <- c(1, 0,0,1,1,1, 0, 1,1)
runs <- vector(length(data))
runs
runs <- vector(length = length(data))
runs
data <- c(1, 0,0,1,1,1, 0, 1,1)
data
findruns  <- function(data, k){
n <- length(data)
runs <- vector(length = n)
for (i in 1:(n-k+1)){
if (all(x[i:(i+k-1)])==1) runs[i] <- i
}
return(runs[runs>0])
}
findruns(data, 2)
data <- c(1, 0,0,1,1,1, 0, 1,1)
data
findruns  <- function(data, k){
n <- length(data)
runs <- vector(length = n)
for (i in 1:(n-k+1)){
if (all(data[i:(i+k-1)])==1) runs[i] <- i
}
return(runs[runs>0])
}
findruns(data, 2)
n <- length(data)
runs <- vector(length = n)
for (i in 1:(n-k+1)){
if (all(data[i:(i+k-1)])==1) runs[i] <- i
}
data <- c(1, 0,0,1,1,1, 0, 1,1)
data
findruns  <- function(data, k){
n <- length(data)
runs <- rep(0, n)
for (i in 1:(n-k+1)){
if (all(data[i:(i+k-1)])==1) runs[i] <- i
}
return(runs[runs>0])
}
findruns(data, 2)
n <- length(data)
runs <- rep(0, n)
for (i in 1:(n-k+1)){
if (all(data[i:(i+k-1)])==1) runs[i] <- i
}
data
runs <- rep(0, n)
runs <- rep(0, n)
for (i in 1:(n-k+1)){
if (all(data[i:(i+k-1)])==1) runs[i] <- i
}
runs
data <- c(1, 0,0,1,1,1, 0, 1,1)
data
findruns  <- function(data, k){
n <- length(data)
runs <- rep(0, n)
for (i in 1:(n-k+1)){
if (all(data[i:(i+k-1)]==1)) runs[i] <- i
}
runs
return(runs[runs>0])
}
findruns(data, 2)
getwd()
setwd("~/Dropbox/02 teaching/econ5043/08github/2022s/lecture/example")
wagedata <- read.csv("data/wage2.csv")
attach(wagedata)
readr::read_csv("https://github.com/lewangecon/man2-2022/blob/master/lecture/example/data/wage2.csv")
aggregate(wage,by=list(married),FUN=mean)
results
results <-aggregate(wage,by=list(married),FUN=mean)[2]
results
results[2]-results[1]
results$x[2]-results$x[1]
wagedata %>%
group_by(married) %>%
summarise(mean = mean(wage,na.rm = TRUE))
library(dplyr)
wagedata %>%
group_by(married) %>%
summarise(mean = mean(wage,na.rm = TRUE))
options(pillar.sigfig = 8)
wagedata %>%
group_by(married) %>%
summarise(mean = mean(wage,na.rm = TRUE))
wagedata %>%
group_by(married) %>%
summarise(mean = median(wage,na.rm = TRUE))
wagedata$education <- NA
wagedata$education[educ<12] <- 1
wagedata$education[educ==12] <- 2
wagedata$education[educ>12] <- 3
wagedata
View(wagedata)
aggregate(wage, by=list(education), FUN=mean)
attach(wagedata)
aggregate(wagedata$wage, by=list(wagedata$education), FUN=mean)
wagedata %>%
mutate(education = case_when(
educ <12 ~ 1,
educ==12 ~ 2,
educ>12 ~ 3
)) %>%
group_by(education) %>%
summarise(mean = mean(wage,na.rm = TRUE))
data <- data.frame(x = c(1:3))
data
data <- data.frame(x = c(1:3)) %>%
mutate(y = 2*x + rnorm(3))
data
beta <- 1
yhat <- beta*x
yhat
attach(data)
beta <- 1
yhat <- beta*x
yhat
data
beta <- 1
data$yhat <- beta*data$x
data
data$error <- data$y - data$yhat
data
data$error2 <- data$error^2
data
data
mean(data$error2)
beta <- 1.1
data$yhat <- beta*data$x
data$error <- data$y - data$yhat
data$error2 <- data$error^2
mean(data$error2)
beta <- 1.2
data$yhat <- beta*data$x
data$error <- data$y - data$yhat
data$error2 <- data$error^2
mean(data$error2)
rmse <- function(beta){
beta <- beta
data$yhat <- beta*data$x
data$error <- data$y - data$yhat
data$error2 <- data$error^2
mean(data$error2)
}
curve(rmse, from = 1, to = 2.5)
attach(data)
rmse <- function(beta){
beta <- beta
data$yhat <- beta*data$x
data$error <- data$y - data$yhat
data$error2 <- data$error^2
mean(data$error2)
}
curve(rmse, from = 1, to = 2.5)
data
ggplot(data = data.frame(x= seq(1,2,.01)), mapping = aes(x = x)) +
stat_function(fun = rmse)
library(tidyverse)
ggplot(data = data.frame(x= seq(1,2,.01)), mapping = aes(x = x)) +
stat_function(fun = rmse)
rm(list=ls())
attach(data)
data <- data.frame(x = c(1:3)) %>%
mutate(y = 2*x + rnorm(3))
rmse <- function(beta){
beta <- beta
data$yhat <- beta*data$x
data$error <- data$y - data$yhat
data$error2 <- data$error^2
mean(data$error2)
}
library(tidyverse)
ggplot(data = data.frame(x= seq(1,2,.01)), mapping = aes(x = x)) +
stat_function(fun = rmse)
data$x
beta <- 1
data %>%
mutate(yhat = x*beta) %>%
mutate(error = y -yhat) %>%
mutate(error2 = error^2) %>%
summarise(mean = mean(error2))
data
data %>%
mutate(yhat = x*beta)
data %>%
mutate(yhat = x*beta) %>%
mutate(error = y -yhat)
data %>%
mutate(yhat = x*beta) %>%
mutate(error = y -yhat) %>%
mutate(error2 = error^2)
data %>%
mutate(yhat = x*beta) %>%
mutate(error = y -yhat) %>%
mutate(error2 = error^2) %>%
summarise(mean = mean(error2))
data %>%
mutate(yhat = x*beta) %>%
mutate(error = y -yhat) %>%
mutate(error2 = error^2) %>%
summarise(mean = mean(error2))
beta <- 2
data %>%
mutate(yhat = x*beta) %>%
mutate(error = y -yhat) %>%
mutate(error2 = error^2) %>%
summarise(mean = mean(error2))
beta <- 3
data %>%
mutate(yhat = x*beta) %>%
mutate(error = y -yhat) %>%
mutate(error2 = error^2) %>%
summarise(mean = mean(error2))
data
data %>%
mutate(yhat = x*beta) %>%
mutate(error = y -yhat)
beta <- 1
data %>%
mutate(yhat = x*beta) %>%
mutate(error = y -yhat) %>%
mutate(error2 = error^2) %>%
summarise(mean = mean(error2))
beta <- 1.1
data %>%
mutate(yhat = x*beta) %>%
mutate(error = y -yhat) %>%
mutate(error2 = error^2) %>%
summarise(mean = mean(error2))
beta <- 1.2
data %>%
mutate(yhat = x*beta) %>%
mutate(error = y -yhat) %>%
mutate(error2 = error^2) %>%
summarise(mean = mean(error2))
beta <- 2
data %>%
mutate(yhat = x*beta) %>%
mutate(error = y -yhat) %>%
mutate(error2 = error^2) %>%
summarise(mean = mean(error2))
