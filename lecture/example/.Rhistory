}
data
runs <- rep(0, n)
runs <- rep(0, n)
for (i in 1:(n-k+1)){
if (all(data[i:(i+k-1)])==1) runs[i] <- i
}
runs
data <- c(1, 0,0,1,1,1, 0, 1,1)
data
findruns  <- function(data, k){
n <- length(data)
runs <- rep(0, n)
for (i in 1:(n-k+1)){
if (all(data[i:(i+k-1)]==1)) runs[i] <- i
}
runs
return(runs[runs>0])
}
findruns(data, 2)
levels(diamonds$cut)
library(tidyverse)
levels(diamonds$cut)
unique(diamonds$cut)
rm(list = ls())
library(tidyverse)
library(dplyr)
library(tidyverse)
library(reshape2)
data <- data.frame(x = sample(1:4,8, replace = TRUE))
fastDummies::dummy_cols(data, select_columns = "x")
library(tidyverse)
library(reshape2)
data <- data.frame(x = sample(1:4,8, replace = TRUE))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(method = lm, formula = y ~ x)
data <- data.frame(x1 = rnorm(8),
x2 = rnorm(8),
id = row_number())
data <- data.frame(x1 = rnorm(8),
x2 = rnorm(8)) %>%
mutate(id = row_number())
data
data <- data.frame(x1 = rnorm(8),
x2 = rnorm(8)) %>%
mutate(id = row_number())
melt(data = data, id = "id", variable.name = "group", value.name = "x")
data <- data.frame(x = seq(-4,8,.01)) %>%
mutate(cdf1 = pnorm(x, mean = 1, sd = 1),
cdf2 = pnorm(x, mean = 2, sd = 1),
cdfc = pnorm(x, mean = 2, sd = 2))
x50 <- qnorm(.5, mean = 2, sd = 1)
data <- data.frame(x = seq(-4,8,.01)) %>%
mutate(cdf1 = pnorm(x, mean = 1, sd = 1),
cdf2 = pnorm(x, mean = 2, sd = 1),
cdfc = pnorm(x, mean = 2, sd = 2))
x50 <- qnorm(.5, mean = 2, sd = 1)
ggplot(data = data, mapping = aes(x = x)) +
stat_function(fun = pnorm, args = list(mean = 1, sd = 1), color = "blue") +
stat_function(fun = pnorm, args = list(mean = 2, sd = 1), color = "red") +
stat_function(fun = pnorm, args = list(mean = 2, sd = 2), color = "black")
data <- data.frame(x = seq(-4,8,.01)) %>%
mutate(cdf1 = pnorm(x, mean = 1, sd = 1),
cdf2 = pnorm(x, mean = 2, sd = 1),
cdfc = pnorm(x, mean = 2, sd = 2))
x50 <- qnorm(.5, mean = 2, sd = 1)
ggplot(data = data, mapping = aes(x = x)) +
stat_function(fun = pnorm, args = list(mean = 1, sd = 1), color = "blue") +
stat_function(fun = pnorm, args = list(mean = 2, sd = 1), color = "red") +
stat_function(fun = pnorm, args = list(mean = 2, sd = 2), color = "black") +
geom_ribbon(mapping = aes(ymin = cdf2, ymax = cdf1),
fill = "steelblue",
alpha = 1/5)
data <- data.frame(x = seq(-4,8,.01)) %>%
mutate(cdf1 = pnorm(x, mean = 1, sd = 1),
cdf2 = pnorm(x, mean = 2, sd = 1),
cdfc = pnorm(x, mean = 2, sd = 2))
x50 <- qnorm(.5, mean = 2, sd = 1)
ggplot(data = data, mapping = aes(x = x)) +
stat_function(fun = pnorm, args = list(mean = 1, sd = 1), color = "blue") +
stat_function(fun = pnorm, args = list(mean = 2, sd = 1), color = "red") +
stat_function(fun = pnorm, args = list(mean = 2, sd = 2), color = "black") +
geom_ribbon(mapping = aes(ymin = cdf2, ymax = cdf1),
fill = "steelblue",
alpha = 1/4) +
geom_ribbon(data = filter(data, x<=x50),
mapping = aes(ymin = cdf2, ymax= cdfc),
fill = "gold",
alpha = 1/10)
data <- data.frame(x = seq(-4,8,.01)) %>%
mutate(cdf1 = pnorm(x, mean = 1, sd = 1),
cdf2 = pnorm(x, mean = 2, sd = 1),
cdfc = pnorm(x, mean = 2, sd = 2))
x50 <- qnorm(.5, mean = 2, sd = 1)
ggplot(data = data, mapping = aes(x = x)) +
stat_function(fun = pnorm, args = list(mean = 1, sd = 1), color = "blue") +
stat_function(fun = pnorm, args = list(mean = 2, sd = 1), color = "red") +
stat_function(fun = pnorm, args = list(mean = 2, sd = 2), color = "black") +
geom_ribbon(mapping = aes(ymin = cdf2, ymax = cdf1),
fill = "steelblue",
alpha = 1/4) +
geom_ribbon(data = filter(data, x<=x50),
mapping = aes(ymin = cdf2, ymax= cdfc),
fill = "red",
alpha = 1/10)
readr::read_csv("https://github.com/lewangecon/man2-2022/blob/master/lecture/example/data/Advertising.csv")
readr::read_csv("https://raw.githubusercontent.com/lewangecon/man2-2022/master/lecture/example/data/Advertising.csv")
data <- readr::read_csv("https://raw.githubusercontent.com/lewangecon/man2-2022/master/lecture/example/data/Advertising.csv")
View(data)
x <- vector(0)
"+"(2,3)
rep(c(1:4), each = 3)
rep(c(1:4), each = c(1,2,3,4))
pacman::p_load(c("tidyverse", "future.apply"))
library(tidyverse)
library(future.apply)
library(furrr)
pacman::p_load(tidyverse, future.apply)
library(tictoc)
pacman::p_load(tidyverse, future.apply)
library(tidyverse)
library(future.apply)
library(furrr)
library(tictoc)
plan(multisession)
mysim <- function(x){
xsq <- x^2
Sys.sleep(2)
return(xsq)
}
tic()
results <- lapply(1:20, mysim)
toc()
tic()
results <- future_lapply(1:20, mysim)
toc()
tic()
results <- future_map_dfr(1:20, mysim)
toc()
library(googlesheets4)
library(googlesheets4)
gs4_deauth()
sheet_id <- "https://docs.google.com/spreadsheets/d/1tQCYQrI4xITlPyxb9dQ-JpMDYeADovIeiZZRNHkctGA/"
read_sheet(sheet_id)
textInput(inputid = "name", label = "Your name")
library(shiny)
textInput(inputid = "name", label = "Your name")
textInput(inputId = "name", label = "Your name")
library(tidyverse)
library(tidyverse)
data <- tribble(
~x, ~y,
#--, -- indicate what follows is data
-20, -8,
-10, -1,
0, 0,
10,1,
20,8
)
mycov <- cov(data)
mycov
eigen(mycov)
eigen(mycov)$vectors[,1]
as.matrix(data)%*%eigen(mycov)$vectors[,1]
prcomp(data)
str(prcomp(data))
prcomp(data)$rotation[,1]
as.matrix(data)%*%prcomp(data)$rotation[,1]
usethis::git_sitrep()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_smooth(method = lm, formula = y ~ x)
data <- data.frame(matrix(rnorm(30), nrow=10))
names(data) <- paste0("x", seq(1:3))
data <- data %>%
mutate(xx = rnorm(n()),
d = rnorm(n()),
xdx = rnorm(n()))
library(tidyverse)
data <- data.frame(matrix(rnorm(30), nrow=10))
names(data) <- paste0("x", seq(1:3))
data <- data %>%
mutate(xx = rnorm(n()),
d = rnorm(n()),
xdx = rnorm(n()))
data %>%
select(num_range("x", 1:2))
data %>%
select(contains("x"))
data %>%
select(-contains("x"))
diamonds %>%
count(cut)
diamonds %>%
count(cut) %>%
mutate(prop = n/sum(n))
diamonds %>%
count(cut) %>%
mutate(prop = n/sum(n)) %>%
ggplot(mapping = aes(x = cut, y = prop)) +
geom_col()
diamonds %>%
count(cut) %>%
mutate(prop = n/sum(n)) %>%
ggplot(mapping = aes(x = cut, y = prop)) +
geom_bar(stat = "identity")
findruns <- function(x, k){
n <- length(x)
runs <- vector(length = n)
for (i in c(1:(n-k+1))){
if (all(x[i:(i+k-1)] == 1)) runs[i] <- i
}
return(runs[runs>0])
}
data <- c(1,0,0,1,1,1,0,1,1)
findruns(data, 2)
wagedata <- read.csv("data/wage2.csv")
attach(wagedata)
results <- lm(wage ~ married + black,data=wagedata)
summary(results)
aggregate(wage,by=list(married,black),FUN=mean)
results<-lm(wage~married*black,data=wagedata)
summary(results)
new<-data.frame(married=c(0,1,0,1),black=c(0,0,1,1))
new
new<-data.frame(married=c(0,1,0,1),black=c(0,0,1,1))
new
predict(results,new)
aggregate(wage,by=list(married,black),FUN=mean)
aggregate(wage,by=list(married,black,urban), FUN=mean)
aggregate(wage,by=list(married,black,urban), FUN=mean)
wage
View(wage)
aggregate(wage,by=list(married,black),FUN=mean)
aggregate(wage,by=list(married,black,urban), FUN=mean)
na.omit(wagedata$urban)
length(na.omit(wagedata$urban))
length(na.omit(wagedata$black))
length(na.omit(wagedata$married))
length(na.omit(wagedata$wage))
aggregate(wage,by=list(married,black,urban), FUN=mean)
aggregate(wage,by=list(married,black), FUN=mean)
aggregate(wage,by=list(married,urban), FUN=mean)
aggregate(wage,by=list(married,black), FUN=mean)
View(wagedata)
sum(is.na(wagedata$urban))
results<-lm(wage~married*black*urban,data=wagedata)
results
new<-data.frame(married=c(0,1),black=c(0,1),urban=c(0,1))
new<-data.frame(married=c(0,1,0,1,0,1,0,1),black=c(0,0,1,1,0,0,1,1),urban=c(0,0,0,0,1,1,1,1))
new
predict(results,new)
aggregate(wage, by=list(married,black,urban), FUN=mean)
wagedata %>%
filter(IQ>58, IQ<62)
library(tidyverse)
wagedata %>%
filter(IQ>58, IQ<62)
wagedata %>%
filter(IQ>58, IQ<62) %>%
summarise(wage = mean(wage))
library(tidyverse)
wagedata %>%
filter(IQ>(60-2), IQ<(60+2)) %>%
summarise(wage = mean(wage))
?req()
library(shiny)
?req()
wagedata <- read.csv("data/wage2.csv")
attach(wagedata)
results <- lm(wage ~ married + black,data=wagedata)
summary(results)
aggregate(wage, by=list(married,black,urban), FUN=mean)
list(married,black,urban)
urban
black
wagedata
View(wagedata)
View(wagedata$urban)
detach(wagedata)
wagedata <- read.csv("data/wage2.csv")
attach(wagedata)
rm(list=ls())
wagedata <- read.csv("data/wage2.csv")
attach(wagedata)
detach(wagedata)
attach(wagedata)
aggregate(wage, by=list(married,black,urban), FUN=mean)
rm(list=ls())
wagedata <- read.csv("data/wage2.csv")
attach(wagedata)
results <- lm(wage ~ married + black,data=wagedata)
summary(results)
?message
message("Yes")
if (NA < 5)
{1}
isTRUE(NA <5)
library(SimDesign)
sigma <- matrix(c(1,.9,.9,1), nrow = 2)
library(SimDesign)
sigma <- matrix(c(1,.9,.9,1), nrow = 2)
data <- rmvnorm(1e4, mean = rep(0,2), sigma = sigma)
data <- as.data.frame(data)
library(tidyverse)
library(SimDesign)
library(tidyverse)
sigma <- matrix(c(1,.9,.9,1), nrow = 2)
data <- rmvnorm(1e4, mean = rep(0,2), sigma = sigma)
data <- as.data.frame(data)
ggplot(data = data, mapping = aes(x = V1, y = V2)) +
stat_density2d(mapping = aes(fill = ..level..),
geom = "polygon",
color = "white")
library(future.apply)
library(purrr)
plan(multisession)
library(tictoc)
library(future.apply)
library(purrr)
plan(multisession)
library(tictoc)
mysqr <- function(x){
xsq <- x^2
Sys.sleep(2)
return(data.frame(x = x, x2 = xsq))
}
tic()
sapply(mysqr, 10)
toc()
library(future.apply)
library(purrr)
plan(multisession)
library(tictoc)
mysqr <- function(x){
xsq <- x^2
Sys.sleep(2)
return(data.frame(x = x, x2 = xsq))
}
tic()
sapply(1:10, mysqr)
toc()
tic()
future_sapply(1:10, mysqr)
toc()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
facet_grid(~ drv)
library(ggridges)
library(tidyverse)
library(tidyverse)
x <- 2
if (x <2) {
print("What?")
} else {
print("No!")
}
library(tidyverse)
x <- 4
if (x <2) {
print("What?")
} else {
print("No!")
}
library(tidyverse)
x <- 1
if (x <2) {
print("What?")
} else {
print("No!")
}
titanic <- tribble(
~Class, ~Sex, ~n,
"1st class", "female passengers", 144,
"1st class", "male passengers", 179,
"2nd class", "female passengers", 106,
"2nd class", "male passengers", 171,
"3rd class", "female passengers", 216,
"3rd class", "male passengers", 493
)
titanic <- tribble(
~Class, ~Sex, ~n,
"1st class", "female passengers", 144,
"1st class", "male passengers", 179,
"2nd class", "female passengers", 106,
"2nd class", "male passengers", 171,
"3rd class", "female passengers", 216,
"3rd class", "male passengers", 493
)
ggplot(data = titanic, mapping = aes(x = Class, y = Sex, color = n)) +
geom_col()
titanic <- tribble(
~Class, ~Sex, ~n,
"1st class", "female passengers", 144,
"1st class", "male passengers", 179,
"2nd class", "female passengers", 106,
"2nd class", "male passengers", 171,
"3rd class", "female passengers", 216,
"3rd class", "male passengers", 493
)
ggplot(data = titanic, mapping = aes(x = Class, y = Sex, fill = n)) +
geom_col()
titanic <- tribble(
~Class, ~Sex, ~n,
"1st class", "female passengers", 144,
"1st class", "male passengers", 179,
"2nd class", "female passengers", 106,
"2nd class", "male passengers", 171,
"3rd class", "female passengers", 216,
"3rd class", "male passengers", 493
)
ggplot(data = titanic, mapping = aes(x = Class, fill = Sex,y = n)) +
geom_col()
library(ggridges)
library(ggridges)
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Species, fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_b(position = "C")
library(ggridges)
ggplot(data = iris, mapping = aes(x = Sepal.Width, y = Species, fill = stat(x))) +
geom_density_ridges_gradient() +
scale_fill_viridis_b(option = "C")
ggplot(data = diamonds, mapping = aes(x = color, y= cut)) +
geom_bar()
ggplot(data = diamonds, mapping = aes(x = color, fill= cut)) +
geom_bar()
ggplot(data = diamonds, mapping = aes(x = cut)) +
geom_bar()
ggplot(data = diamonds, mapping = aes(x = fct_infreq(cut))) +
geom_bar()
ggplot(data = diamonds, mapping = aes(x = fct_infreq(cut))) +
geom_bar() +
coord_flip()
ggplot(data = diamonds, mapping = aes(x = fct_rev(fct_infreq(cut)))) +
geom_bar() +
coord_flip()
library(tidyverse)
library(tidyverse)
data <- c(rep(1,3), rep(0,9))
data
library(tidyverse)
data <- c(rep(1,3), rep(0,9))
Theta <- c(.25,.5, .75)
pTheta <- c(.25, .5, .25)
pDataGivenTheta <- Theta^nHeads*(1-Theta)^nTails
library(tidyverse)
data <- c(rep(1,3), rep(0,9))
nHeads <- sum(data)
nTails <- length(data)-nHeads
Theta <- c(.25,.5, .75)
pTheta <- c(.25, .5, .25)
pDataGivenTheta <- Theta^nHeads*(1-Theta)^nTails
pDataGivenTheta
Theta^nHeads
(1-Theta)^nTails
pData <- sum(pDataGivenTheta*pTheta)
pDataGivenTheta/pData*pTheta
library(shiny)
118.54
118.54 + 110.10
118.54 + 837.95 - 119.99
2500 - (118.54 + 837.95 - 119.99)
2000 - (118.54 + 837.95 - 119.99)
mydata <- read.table("data/coach_salary_usatoday02.csv", header=TRUE, sep=",")
setwd("~/Dropbox/02 teaching/01 Active Courses/econ5043/08github/2022s/lecture/example/")
mydata <- read.table("data/coach_salary_usatoday02.csv", header=TRUE, sep=",")
View(mydata)
others <- mydata[2:10,]
fit<-lm(total ~ share + career + sec, data=others)
predict(fit, newdata = data.frame(share=0,career=167,sec=1))
5545852 - predict(fit, newdata = data.frame(share=0,career=167,sec=1))
(5545852 - predict(fit, newdata = data.frame(share=0,career=167,sec=1)))/5545852
fit<-lm(total ~ share + career + sec + share*career, data=others)
(5545852 - predict(fit, newdata = data.frame(share=0,career=167,sec=1)))/5545852
library(fpp)
mydata <- read.table("data/coach_salary_usatoday02.csv", header=TRUE, sep=",")
others <- mydata[2:10,]
fit1<-lm(total ~ share , data=others)
fit2<-lm(total ~ career, data=others)
fit3<-lm(total ~ sec, data=others)
fit4<-lm(total ~ share + career + sec , data=others)
fit5<-lm(total ~ share + career + sec + share*career, data=others)
CV1<-CV(fit1)
CV2<-CV(fit2)
CV3<-CV(fit3)
CV4<-CV(fit4)
CV5<-CV(fit5)
cbind(CV1,CV2,CV3,CV4,CV5)
options(scipen = 999)
cbind(CV1,CV2,CV3,CV4,CV5)
cbind(CV1,CV2,CV3,CV4,CV5)
cbind(CV1,CV2,CV3,CV4,CV5)
install.packages("glmnet")
library(glmnet)
wagedata <- read.csv("data/wage2.csv")
wagedata <- na.omit(wagedata)
View(wagedata)
wagedata <- wagedata[,-17]
View(wagedata)
X <- model.matrix(wage ~ ., wagedata)[,-1]
names(X)
View(X)
y <- wagedata$wage
fit.lr <- lm(wage ~ ., wagedata)
coef(fit.lr)
par(mfrow = c(1, 2))
par(mfrow = c(1, 2))
fit.ridge <- glmnet(X, y, alpha = 0)
plot(fit.ridge)
fit.lasso <- glmnet(X, y, alpha = 1)
plot(fit.lasso)
